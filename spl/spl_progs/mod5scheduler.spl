//get pid of process which was set to READY
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
multipush(BP);

//save KPTR PTBR PTLR to Process table 
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias pid R2;
pid = 0;

//Check for Swapper Daemon.
if ([SYSTEM_STATUS_TABLE + 5] != 0) then

	if ([PROCESS_TABLE + 16*15 + 4] == WAIT_DISK) then
		pid = 0;
	else
		pid = 15;
	endif;
	
else	
	pid = (currentPID+1)%15;
	while(pid != currentPID) do
		process_table_entry = PROCESS_TABLE + pid * 16;	
		if ([process_table_entry + 6] == 0 && ([process_table_entry + 4] == READY || [process_table_entry + 4] == CREATED)) then
			break;
		endif;
		pid = (pid+1) % 15;
	endwhile;
	
	if(pid == currentPID) then
		pid = 0;
	endif;
endif;

process_table_entry = PROCESS_TABLE + pid * 16;
PTBR = [process_table_entry + 14];
PTLR = [process_table_entry + 15];
[SYSTEM_STATUS_TABLE + 1] = pid;

if ([process_table_entry + 4] == CREATED) then
	SP = [process_table_entry + 13];
	[process_table_entry + 4] = RUNNING;			
	[process_table_entry + 9] = 0;
	BP = [[process_table_entry + 11] * 512];
	ireturn;
endif;

SP = [process_table_entry + 11]*512 + [process_table_entry + 12];
[process_table_entry + 4] = RUNNING;
multipop(BP);
return;
