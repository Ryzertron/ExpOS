//Set MODE Flag to -1
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

//UPTR set to Stack Ptr
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

//Set SP to user area page
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

backup;

alias userSP R0;
userSP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

multipush(EIP);

if ( EC != 0 || userSP == ((PTLR * 512) - 1) )then

    if ( userSP == ((PTLR * 512) - 1) )then
        print "UsrStackFull";
    endif; 
    
    if ( EC == 1 )then
        print "Exception: ";
        print "Illegal ";
        print "Instruction";
    endif;
    
    if ( EC == 2 )then
     	print "Exception: ";
        print "Illegal ";
        print "Memory ";
        print "Access";
    endif;
    
    if ( EC == 3 )then
    		print "Exception: ";
    		print "Invalid ";
        print "Arithmetic ";
    endif;
    
    //calling Exit Process
    multipush(R0,R1,R2,SP);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,SP,PTBR,PTLR);

    multipush(R0,R1,R2,SP);
    call SCHEDULER;
    multipop(R0,R1,R2,SP);
endif;

if ( EPN > 3 && EPN < 8)then
    multipush(R0,R1,R2,R3);
    R1 = 5;
    R2 = [ DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + EPN];
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MEMORY_MANAGER;
    [PTBR + EPN*2]  = R0;
    [PTBR + EPN*2 + 1] = "1100";
    multipop(R0,R1,R2,R3);
    
else    
    multipush(R0,R1,R2,R3);
    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 4]  = R0;
    [PTBR + 5]  = "1110";

    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 6]  = R0;
    [PTBR + 7]  = "1110";
    multipop(R0,R1,R2,R3);
endif;


multipop(EIP);

restore;

//Set MODE Flag to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//Change back to User Stack
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];

SP = SP + 1;

[[PTBR + 2*(SP/512)]*512 + (SP % 512)] = EIP;
ireturn;


