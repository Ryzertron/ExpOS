//------------PROCESS MANAGER-----------------

alias fnumber R1;
alias cpid R2;

//GET PCB ENTRY
if (fnumber == 1)then
    multipush(R1,R2,R3);
    
    R1 = 0;
    while ( R1 != MAX_PROC_NUM && [PROCESS_TABLE + 16*R1 + 4] != TERMINATED)do
        R1 = R1 + 1;
    endwhile;
    if ( R1 == MAX_PROC_NUM )then
        R0 = -1;
    else
        R0 = R1;
        [PROCESS_TABLE + 16*R1 + 1]  = R1;
        [PROCESS_TABLE + 16*R1 + 4]  = ALLOCATED;
        [PROCESS_TABLE + 16*R1 + 14] = PAGE_TABLE_BASE + 20 * R1;
        [PROCESS_TABLE + 16*R1 + 15] = 10;
    endif;

    multipop(R1,R2,R3);
    return;
endif;

//FREE USER AREA PAGE 
if (fnumber == 2)then

    alias resourceTableBase R1;
    resourceTableBase = [PROCESS_TABLE + (cpid * 16) + 11]*512 + 496;
    
    alias i R4;
    i = 0;
    while(i<8)do
        if ( [resourceTableBase + 2*i] == SEMAPHORE )then
            multipush(R0,R1,R2,R3,R4);
            R1 = 7;
            R2 = [resourceTableBase + 2*i + 1];
            R3 = [SYSTEM_STATUS_TABLE+1];
            call RESOURCE_MANAGER;
            multipop(R0,R1,R2,R3,R4);
        endif;
        
        if ( [resourceTableBase + 2*i] == FILE )then
            multipush(R0,R1,R2,R3,R4);
            R1 = 4;
            R2 = [resourceTableBase + 2*i + 1];
            call FILE_MANAGER;
            multipop(R0,R1,R2,R3,R4);
        endif;
        i = i + 1;
    endwhile;

    R1 = 2;
    R2 = [PROCESS_TABLE + (cpid * 16) + 11];
    call MEMORY_MANAGER;

    return;
endif;

//EXIT function
if (fnumber == 3)then
    multipush(R0,R1,R2,R3);
    R1 = 4;
    R2 = cpid;
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,R3);
    multipush(R0,R1,R2,R3);
    R1 = 2;
    R2 = cpid;
    call PROCESS_MANAGER;
    multipop(R0,R1,R2,R3);
    [PROCESS_TABLE + (cpid * 16) + 4] = TERMINATED;
    
    multipush(R1);
    if ( [PROCESS_TABLE + (cpid * 16) + 9] != 9 )then
        alias ind R1;
        ind = 0;
        while (ind < MAX_PROC_NUM)do
            if ( [PROCESS_TABLE + ( ind * 16) + 4]== WAIT_PROCESS && [PROCESS_TABLE + ( ind * 16) + 5] == cpid )then
                [PROCESS_TABLE + ( ind * 16) + 4] = READY;
            endif;
            if ( [PROCESS_TABLE + ( ind * 16) + 2] == cpid )then
                [PROCESS_TABLE + ( ind * 16) + 2] = -1;
            endif;
            ind = ind + 1;
        endwhile;
    endif; 
    multipop(R1);

    return;
endif;

//Free Page Table
if (fnumber == 4)then
    PTBR = [PROCESS_TABLE + (cpid * 16) + 14];
    PTLR = [PROCESS_TABLE + (cpid * 16) + 15];
    //Library
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";

    R3 = 4;
    while( R3 != 20)do
        if ( [PTBR+R3] != -1 )then
            multipush(R0,R1,R2,R3);
            R1 = 2;
            R2 = [PTBR + R3];
            call MEMORY_MANAGER;
            multipop(R0,R1,R2,R3);

            [PTBR+R3] = -1;
            [PTBR+R3+1] = "0000";
        endif;
        
        R3 = R3 + 2;
    endwhile;
    
    //Reseting Disk Map Table
    R3 = 0;
    while ( R3 < 10 )do
        if (R3 == 2 || R2 == 3 || R3 == 8 || R3 == 9)then
            if ([DISK_MAP_TABLE + R3] != -1)then
                multipush(R0,R1,R2,R3,R4,R5,R6,R7);
                R1 = 4;
                R2 = [DISK_MAP_TABLE + R3];
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call MEMORY_MANAGER;
                multipop(R0,R1,R2,R3,R4,R5,R6,R7);
            endif;
        endif;
        [DISK_MAP_TABLE + R3 ] = -1;
        R3 = R3 + 1;
    endwhile;
    
    return;
endif;


//KILL ALL 
if (fnumber == 5)then
    alias index R4;
    index = 0 ;
    while (index < MAX_FILE_NUM ) do
        if( [INODE_TABLE + 16*index + 1] != -1)then
        //Acquire Inode
            multipush(R1,R2,R4);
            R3 = cpid;
            R2 = index;
            R1 = 4;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R4);
        endif;
        index = index + 1;
    endwhile;


    //Swapper Daemon not implemented
    
    index = 2;
    while ( index < MAX_PROC_NUM )do
        if ( index != cpid && [PROCESS_TABLE + index*16 + 4]!=TERMINATED )then
            multipush(R1,R2,R4);
            R2 = cpid;
            R1 = 3;
            call PROCESS_MANAGER;
            multipop(R1,R2,R4);
        endif;
        index = index + 1;
    endwhile;
//Release Inode
    index = 0;
    while (index < MAX_FILE_NUM )do
        if( [INODE_TABLE + 16*index + 1] != -1 )then
            multipush(R2,R4);
            R3 = cpid;
            R2 = index;
            R1 = 5;
            call RESOURCE_MANAGER;
            multipop(R2,R4);
        endif;
        index = index + 1;
    endwhile;
    return;
endif;




