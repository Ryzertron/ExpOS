//Load Resource Manager Module 0
loadi(40,53);
loadi(41,54);

//Load Process Manager Module 1
loadi(42,55);
loadi(43,56);

//Load Memory Manager Module 2
loadi(44,57);
loadi(45,58);

//Load Device manager Module 4
loadi(48,61);
loadi(49,62);

//Load scheduler Module 5
loadi(50,63);
loadi(51,64);

//Load INIT PROGRAM
loadi(65,7);
loadi(66,8);

//Load Exec
loadi(83,69);

//Load Library
loadi(63,13);
loadi(64,14);

//Exhandler
loadi(2, 15);
loadi(3, 16);

//Load Timer Interrupt
loadi(4, 17);
loadi(5, 18);

//Disk Interrupt
loadi(6, 19);
loadi(7, 20);

//Load Console Interrupt
loadi(8,21);
loadi(9,22);

//Load INT 6
loadi(14,27);
loadi(15,28);

//Load INT 7
loadi(16,29);
loadi(17,30);

//Load INT 8
loadi(18,31);
loadi(19,32);

//Load INT 9
loadi(20,33);
loadi(21,34);

//LOAD INT10
loadi(22,35);
loadi(23,36);

//INT 11
loadi(24,37);
loadi(25,38);

//INT 13
loadi(28,41);
loadi(29,42);

//INT 14
loadi(30,43);
loadi(31,44);

//INT 15
loadi(32,45);
loadi(33,46);

//Load Inode Table
loadi(59,3);
loadi(60,4);

//Disk Free LIst
loadi(61,2);


//Initialize Memory Free List

alias i R0;
i=0;
while(i!=128)do
    if (i < 83) then
        [MEMORY_FREE_LIST+i]=1;
    else 
        [MEMORY_FREE_LIST+i]=0;
    endif;
    i=i+1;
endwhile;


//Initialize Semaphore Table
alias idx R1;
idx = 0;

while(idx < 32*4 )do
    //Locking PID to -1 and Process Count to 0
    [ SEMAPHORE_TABLE + idx ] = -1;
    [ SEMAPHORE_TABLE + idx + 1] = 0;
    idx = idx + 4;
endwhile;


[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

//Populate PAGE TABLE for INIT
//Library
[(PAGE_TABLE_BASE + 20) +0] = 63;
[(PAGE_TABLE_BASE + 20) +1] = "0100";
[(PAGE_TABLE_BASE + 20) +2] = 64;
[(PAGE_TABLE_BASE + 20) +3] = "0100";

//Heap
[(PAGE_TABLE_BASE + 20) +4] = 78;
[(PAGE_TABLE_BASE + 20) +5] = "0110";
[(PAGE_TABLE_BASE + 20) +6] = 79;
[(PAGE_TABLE_BASE + 20) +7] = "0110";

//Code
[(PAGE_TABLE_BASE + 20) +8] = 65;
[(PAGE_TABLE_BASE + 20) +9] = "0100";
[(PAGE_TABLE_BASE + 20) +10] = 66;
[(PAGE_TABLE_BASE + 20) +11] = "0100";
[(PAGE_TABLE_BASE + 20) +12] = -1;
[(PAGE_TABLE_BASE + 20) +13] = "0000";
[(PAGE_TABLE_BASE + 20) +14] = -1;
[(PAGE_TABLE_BASE + 20) +15] = "0000";

//Stack
[(PAGE_TABLE_BASE + 20) +16] = 76;
[(PAGE_TABLE_BASE + 20) +17] = "0110";
[(PAGE_TABLE_BASE + 20) +18] = 77;
[(PAGE_TABLE_BASE + 20) +19] = "0110";

//Populate Process table
[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+11]=80;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE + 20;
[PROCESS_TABLE+16+15]=10;

//Per Process table for INIT
alias perprocess R1;
perprocess = 80*512 + RESOURCE_TABLE_OFFSET;
while ( perprocess < 81*512 )do
    [perprocess] = -1;
    perprocess = perprocess + 2;
endwhile;

//Disk Map Table for INIT Process
[ DISK_MAP_TABLE + 10 + 0] = -1;
[ DISK_MAP_TABLE + 10 + 1] = -1;
[ DISK_MAP_TABLE + 10 + 2] = -1;
[ DISK_MAP_TABLE + 10 + 3] = -1;
[ DISK_MAP_TABLE + 10 + 4] = 7;
[ DISK_MAP_TABLE + 10 + 5] = 8;
[ DISK_MAP_TABLE + 10 + 6] = -1;
[ DISK_MAP_TABLE + 10 + 7] = -1;
[ DISK_MAP_TABLE + 10 + 8] = -1;
[ DISK_MAP_TABLE + 10 + 9] = -1;


//Set Stack Pointer and value at address to zero for setting IP
//init
[76*512] = [65 * 512 + 1];

//Setting Status of terminal as free
[TERMINAL_STATUS_TABLE] = 0;

//Disk Status Table
[DISK_STATUS_TABLE + 0 ] = 0;

//Setting rest to TERMINATED
[PROCESS_TABLE + 16*2 + 4] = TERMINATED;
[PROCESS_TABLE + 16*3 + 4] = TERMINATED;
[PROCESS_TABLE + 16*4 + 4] = TERMINATED;
[PROCESS_TABLE + 16*5 + 4] = TERMINATED;
[PROCESS_TABLE + 16*6 + 4] = TERMINATED;
[PROCESS_TABLE + 16*7 + 4] = TERMINATED;
[PROCESS_TABLE + 16*8 + 4] = TERMINATED;
[PROCESS_TABLE + 16*9 + 4] = TERMINATED;
[PROCESS_TABLE + 16*10 + 4] = TERMINATED;
[PROCESS_TABLE + 16*11 + 4] = TERMINATED;
[PROCESS_TABLE + 16*12 + 4] = TERMINATED;
[PROCESS_TABLE + 16*13 + 4] = TERMINATED;
[PROCESS_TABLE + 16*14 + 4] = TERMINATED;
[PROCESS_TABLE + 16*15 + 4] = TERMINATED;

return;
