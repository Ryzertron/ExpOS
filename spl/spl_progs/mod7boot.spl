//Load Resource Manager Module 0
loadi(40,53);
loadi(41,54);

//Load Process Manager Module 1
loadi(42,55);
loadi(43,56);

//Load Memory Manager Module 2
loadi(44,57);
loadi(45,58);

//Load File Manager Module 3
loadi(46,59);
loadi(47,60);

//Load Device manager Module 4
loadi(48,61);
loadi(49,62);

//Load scheduler Module 5
loadi(50,63);
loadi(51,64);

//Load INIT PROGRAM
loadi(65,7);
loadi(66,8);

//Load SHELL
loadi(67,9);
loadi(68,10);

//Load Exec
loadi(83,69);

//Load Library
loadi(63,13);
loadi(64,14);

//Exhandler
loadi(2, 15);
loadi(3, 16);

//Load Timer Interrupt
loadi(4, 17);
loadi(5, 18);

//Disk Interrupt
loadi(6, 19);
loadi(7, 20);

//Load Console Interrupt
loadi(8,21);
loadi(9,22);

//Load INT4
loadi(10, 23);
loadi(11, 24);

//Load INT 5
loadi(12,25);
loadi(13,26);

//Load INT 6
loadi(14,27);
loadi(15,28);

//Load INT 7
loadi(16,29);
loadi(17,30);

//Load INT 8
loadi(18,31);
loadi(19,32);

//Load INT 9
loadi(20,33);
loadi(21,34);

//LOAD INT 10
loadi(22,35);
loadi(23,36);

//INT 11
loadi(24,37);
loadi(25,38);

//INT 12
loadi(26,39);
loadi(27,40);

//INT 13
loadi(28,41);
loadi(29,42);

//INT 14
loadi(30,43);
loadi(31,44);

//INT 15
loadi(32,45);
loadi(33,46);

//INT 16
loadi(34,47);
loadi(35,48);

//INT 17
loadi(36,49);
loadi(37,50);

//Load Inode Table
loadi(59,3);
loadi(60,4);

//Root File
loadi(62,5);

//Disk Free List
loadi(61,2);

//Populate PAGE TABLE for INIT
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR +0] = 63;
[PTBR +1] = "0100";
[PTBR +2] = 64;
[PTBR +3] = "0100";

//Heap
[PTBR +4] = -1;
[PTBR +5] = "0000";
[PTBR +6] = -1;
[PTBR +7] = "0000";

//Code
[PTBR +8] = 65;
[PTBR +9] = "0100";
[PTBR +10] = -1;
[PTBR +11] = "0000";
[PTBR +12] = -1;
[PTBR +13] = "0000";
[PTBR +14] = -1;
[PTBR +15] = "0000";

//Stack
[PTBR +16] = 66;
[PTBR +17] = "0110";
[PTBR +18] = -1;
[PTBR +19] = "0000";

//Populate Process table
[PROCESS_TABLE+16]= 0;
[PROCESS_TABLE+17]=1;
[PROCESS_TABLE+19] = 0;
[PROCESS_TABLE+20]=CREATED;
[PROCESS_TABLE+27]=77;
[PROCESS_TABLE+28]=0;
[PROCESS_TABLE+29]=4096;
[PROCESS_TABLE+30]=PAGE_TABLE_BASE + 20;
[PROCESS_TABLE+31]=10;
[66*512] = [65 * 512 + 1];

//Disk Map Table for Init Process
alias index R1;
index = 0;
while(index<10)do
    [ DISK_MAP_TABLE + 10 + index] = -1;
    index=index+1;
endwhile;

[ DISK_MAP_TABLE + 20 + 4] = 7;
[ DISK_MAP_TABLE + 20 + 5] = 8;


//-------------------------SHELL PROCESS
PTBR = PAGE_TABLE_BASE + 40;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8]  = 67;
[PTBR+9]  = "0100";
[PTBR+10] = 68; 
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78; 
[PTBR+17] = "0110";
[PTBR+18] = 79; 
[PTBR+19] = "0110";

//PROCESS TABLE
[PROCESS_TABLE + 32] = 0;
[PROCESS_TABLE + 33] = 2;
[PROCESS_TABLE + 35] = 0;
//[PROCESS_TABLE + 36] = TERMINATED;
[PROCESS_TABLE + 43] = 80;
[PROCESS_TABLE + 44] = 0;
[PROCESS_TABLE + 45] = 4096; 
[PROCESS_TABLE + 46] = PTBR;
[PROCESS_TABLE + 47] = 10;
[78 * 512] = [67 * 512 + 1];


//Disk Map Table for Shell Process
index = 0;
while(index<10)do
    [ DISK_MAP_TABLE + 20 + index] = -1;
    index=index+1;
endwhile;

[ DISK_MAP_TABLE + 20 + 4] = 9;
[ DISK_MAP_TABLE + 20 + 5] = 10;


//----------------------------------------Initializing Structures
alias idx R0;

//Setting rest of the processes to TERMINATED
idx = 2;
while(idx<16)do
    [PROCESS_TABLE + 16*idx + 4] = TERMINATED;
    idx = idx + 1;
endwhile;

//Terminal Status
[TERMINAL_STATUS_TABLE] = 0;

//Disk Status
[DISK_STATUS_TABLE + 0 ] = 0;


//Memory Free List
idx=0;
while(idx !=128)do
    if (idx < 83) then
        [MEMORY_FREE_LIST+idx]=1;
    else 
        [MEMORY_FREE_LIST+idx]=0;
    endif;
    idx=idx+1;
endwhile;


[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 4] = 0;
[SYSTEM_STATUS_TABLE + 5] = 0;

//Per Process Resource table for INIT
idx = 77*512 + RESOURCE_TABLE_OFFSET;
while ( idx < 78*512 )do
    [idx] = -1;
    idx = idx + 2;
endwhile;

//Per Process Resource table for SHELL
idx = 80*512 + RESOURCE_TABLE_OFFSET;
while ( idx < 81*512 )do
    [idx] = -1;
    idx = idx + 2;
endwhile;

//Semaphore Table
idx = 0;
while(idx < 32*4 )do
    //Locking PID to -1 and Process Count to 0
    [ SEMAPHORE_TABLE + idx ] = -1;
    [ SEMAPHORE_TABLE + idx + 1] = 0;
    idx = idx + 4;
endwhile;

//Buffer Table
idx = 0;
while(idx < MAX_BUFFER)do
    [BUFFER_TABLE + 4*idx ] = -1;
    [BUFFER_TABLE + 4*idx + 1 ] = 0;
    [BUFFER_TABLE + 4*idx + 2 ] = -1;
    idx = idx + 1;
endwhile;

//File Status Table
idx = 0;
while(idx < MAX_FILE_NUM)do
    [FILE_STATUS_TABLE + 4*idx ] = -1;
    [FILE_STATUS_TABLE + 4*idx + 1 ] = -1;
    idx = idx + 1;
endwhile;

//Open File Table
idx = 0;
while(idx < MAX_OPENFILE_NUM)do
    [OPEN_FILE_TABLE + 4*idx ] = -1;
    [OPEN_FILE_TABLE + 4*idx + 1] = 0;
    idx = idx + 1;
endwhile;
return;
