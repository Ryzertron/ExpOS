//-------------MEMORY MANAGER----------------

alias fnumber R1;
alias pgnumber R2;
alias newpage R3;

//Get Free Page
if (fnumber == 1)then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while([SYSTEM_STATUS_TABLE + 2] == 0)do
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_MEM;
        call SCHEDULER;
    endwhile;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    newpage = 0;
    while( [MEMORY_FREE_LIST + newpage ] != 0 &&  newpage < NUM_MEM_PAGES )do
        newpage = newpage + 1;
    endwhile;

    [MEMORY_FREE_LIST + newpage ] = 1;

    R0 = newpage;
    return;
endif;

//Get Free Block
if (fnumber == 3)then

    alias blockNo R2;

    blockNo = DISK_FREE_AREA;
    while(blockNo < DISK_SWAP_AREA &&  [DISK_FREE_LIST + blockNo]==1 )do
        blockNo = blockNo + 1;
    endwhile;

    if (blockNo==DISK_SWAP_AREA)then
        R0 = -1;
    else
        [DISK_FREE_LIST + blockNo] = 1;
        R0 = blockNo;
    endif;
    return;
endif;


//Release Page Function
if (fnumber == 2) then
	[MEMORY_FREE_LIST + pgnumber] = 	[MEMORY_FREE_LIST + pgnumber] - 1;
	
	if ([MEMORY_FREE_LIST + pgnumber] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	else
		return;
	endif;
	
	alias cpid R4;
	cpid = 0;
	while (cpid < 16) do
		if ([PROCESS_TABLE + cpid * 16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + cpid *16 + 4] = READY;
		endif;
		cpid = cpid + 1;
	endwhile;
	return;
endif;

//Release Block
if (fnumber == 4)then
    alias BlockNo R2;
    alias currentPID R3;

    [DISK_FREE_LIST + BlockNo ] = [DISK_FREE_LIST + BlockNo ] - 1;
    return;
endif; 

//Get Code Page
if(fnumber == 5) then
	alias retPageNo R0;
    alias BlockNo R2;
    alias currentPID R3;

    alias i R5;
    alias j R6;
    i=0;
    while( i < MAX_PROC_NUM )do
        j=4;
        while(j < 8)do
            if ( [DISK_MAP_TABLE + 10*i + j] == BlockNo) then
            
            		//checking Page Number is not -1
                if ([[PROCESS_TABLE + (i * 16) + 14] + 2 * j] != -1)then
                    R0 = [[PROCESS_TABLE + (i * 16) + 14] + 2 * j];
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1; 
                    return;
                endif;
                
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;
    
    

    multipush(R1,R2,R3,R4,R5,R6);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6);
    
    
    multipush(R0,R1,R2,R3,R4,R5,R6);
    R1 = 2;
    R4 = BlockNo;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = retPageNo;
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5,R6);

    return;
endif;


//Get Swap Block
if (fnumber == 6)then
    alias blockNo R2;
    blockNo = DISK_SWAP_AREA;
    while(blockNo < DISK_SIZE &&  [DISK_FREE_LIST + blockNo]!=0 )do
        blockNo = blockNo + 1;
    endwhile;

    if (blockNo==DISK_SIZE)then
        R0 = -1;
    else
        [DISK_FREE_LIST + blockNo] = 1;
        R0 = blockNo;
    endif;
    return;
endif;


return;

