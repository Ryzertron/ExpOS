alias fnumber R1;
alias currentpid R2;

//Acquire Disk
if ( fnumber == 3 )then
    //Waiting for Disk to be released
    while( [DISK_STATUS_TABLE + 0] == 1 )do
        [PROCESS_TABLE + ( currentpid * 16) + 4] = WAIT_DISK;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;

    //Setting new process to Disk
    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 4] = currentpid;
	return;
endif;


//Acquire Terminal Function
if (fnumber == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentpid * 16 + 4] = WAIT_TERMINAL;
		multipush(R0,R1,R2,R3,R4);
		call SCHEDULER;
		multipop(R0,R1,R2,R3,R4);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentpid;
	return;
endif;

//Release Terminal function
if (fnumber == 9) then
	alias retval R0;
	//Invalid Case where pid doesnt match
	if(currentpid != [TERMINAL_STATUS_TABLE +1]) then
		retval = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	//setting Process States with WAIT_TERMINAL as READY
	multipush(R4);
	alias pid R4;
	pid = 0;
	while(pid < 16) do
		if ([PROCESS_TABLE + (pid*16) + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + pid*16 + 4] = READY;
		endif;
		pid = pid + 1;
	endwhile;
	multipop(R4);
	retval = 0;
	return;
endif;
