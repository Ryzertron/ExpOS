alias fnumber R1;
alias currentpid R2;

//ACQUIRE BUFFER
if ( fnumber == 1 )then
    alias BufferNo R2;
    alias currPID R3;

    //Checking Buffer Status table to see if Buffer is free
    while ([BUFFER_TABLE + 4*BufferNo + 2] != -1 )do
        [PROCESS_TABLE + ( currPID * 16) + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + ( currPID * 16) + 5] = BufferNo;
        multipush(R2,R3);
        call SCHEDULER;
        multipop(R2,R3);
    endwhile;

    //Setting Locking PID in Buffer Status Table
    [BUFFER_TABLE + 4*BufferNo + 2] = currPID;
    return;
endif;

//RELEASE BUFFER
if ( fnumber == 2 )then
    alias BufferNo R2;
    alias currPID R3;
    alias index R4;

    //If this PID did not lock
    if ([BUFFER_TABLE + 4*BufferNo + 2]!=currPID)then
        R0 = -1;
    else
        [BUFFER_TABLE + 4*BufferNo + 2] = -1;
        index=0;
        //Loop through and make every process ready
        while( index != 16 )do
            if ( [PROCESS_TABLE + ( index * 16) + 4] == WAIT_BUFFER &&  [PROCESS_TABLE + ( index * 16) + 5] == BufferNo)then
                [PROCESS_TABLE + ( index * 16) + 4] = READY;
            endif;
            index = index + 1;
        endwhile;
        R0 = 0;
    endif;
    return;
endif;

//Acquire Disk
if ( fnumber == 3 )then
    //Waiting for Disk to be released
    while( [DISK_STATUS_TABLE + 0] == 1 )do
        [PROCESS_TABLE + ( currentpid * 16) + 4] = WAIT_DISK;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;

    //Setting new process to Disk
    [DISK_STATUS_TABLE + 0] = 1;
    [DISK_STATUS_TABLE + 4] = currentpid;
	return;
endif;

//ACQUIRE INODE
if (fnumber == 4 )then
    alias inodeIndex R2;
    alias currPID R3;

//wait while file is locked
    while ( [FILE_STATUS_TABLE + inodeIndex*4 ] != -1)do
        [PROCESS_TABLE + ( currPID * 16) + 4] = WAIT_FILE;
        [PROCESS_TABLE + ( currPID * 16) + 5] = inodeIndex;
        multipush(R1,R2,R3);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;

    //already deleted by some process
    if ( [INODE_TABLE + 16*inodeIndex] == -1 )then
        R0 = -1;
    else
        //Locked
        [FILE_STATUS_TABLE + inodeIndex*4 ] = currPID;
        R0 = 0;
    endif;

endif;


//RELEASE INODE
if (fnumber == 5 )then
    alias inodeIndex R2;
    alias currPID R3;
    alias index R4;

    if ([FILE_STATUS_TABLE + inodeIndex*4 ] != currPID)then
        R0 = -1;
    else
        [FILE_STATUS_TABLE + inodeIndex*4 ] = -1;
        index=0;
        //Loop through and make every process ready
        while( index != 16 )do
            if ( [PROCESS_TABLE + ( index * 16) + 4] == WAIT_FILE && [PROCESS_TABLE + ( index * 16) + 5] == inodeIndex)then
                [PROCESS_TABLE + ( index * 16) + 4] = READY;
            endif;
            index = index + 1;
        endwhile;
        R0 = 0;
    endif;

endif;


//ACQUIRE SEMAPHORE
if (fnumber == 6 )then
    alias currentPID R2;
    alias index R3;

    index = 0;

    while(index < 32 && [SEMAPHORE_TABLE + index*4 + 1] != 0)do
        index = index + 1 ;
    endwhile;
    
    if (index == 32)then
        R0 = -1;
    else    
        //Locking PID
        [SEMAPHORE_TABLE + index*4 + 0] = -1;
        //Process Count
        [SEMAPHORE_TABLE + index*4 + 1] = 1;
        R0 = index;
    endif;
	return;
endif;

//RELEASE SEMAPHORE
if (fnumber == 7 )then
    alias semIndex R2;
    alias currentPID R3;
    alias i R4;

    //Checking if locked by current process then release semaphore and all waiting processes
    if ( [SEMAPHORE_TABLE + semIndex*4 ] ==  currentPID )then
        //Unlock sempahore
        [SEMAPHORE_TABLE + semIndex*4 ] = -1;
        i=0;
        while (i<16)do
            if ( [ PROCESS_TABLE + i*16 + 4 ] == WAIT_SEMAPHORE && [ PROCESS_TABLE + i*16 + 5 ] == semIndex )then
                [ PROCESS_TABLE + i*16 + 4 ] = READY;
            endif;
            i = i + 1;
        endwhile;
    endif;

    [SEMAPHORE_TABLE + semIndex*4 + 1] = [SEMAPHORE_TABLE + semIndex*4 + 1] - 1;
	return;
endif;


//Acquire Terminal Function
if (fnumber == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentpid * 16 + 4] = WAIT_TERMINAL;
		multipush(R0,R1,R2,R3,R4);
		call SCHEDULER;
		multipop(R0,R1,R2,R3,R4);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentpid;
	return;
endif;

//Release Terminal function
if (fnumber == 9) then
	alias retval R0;
	//Invalid Case where pid doesnt match
	if(currentpid != [TERMINAL_STATUS_TABLE +1]) then
		retval = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	//setting Process States with WAIT_TERMINAL as READY
	multipush(R4);
	alias pid R4;
	pid = 0;
	while(pid < 16) do
		if ([PROCESS_TABLE + (pid*16) + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + pid*16 + 4] = READY;
		endif;
		pid = pid + 1;
	endwhile;
	multipop(R4);
	retval = 0;
	return;
endif;
return;
