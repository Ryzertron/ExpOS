alias fnumber R1;
alias currentPID R2;

//DISK STORE
if (fnumber == 1)then
    alias PageNo R3;
    alias BlockNo R4;

    multipush(R3,R4);
    R1 = 3;
    call RESOURCE_MANAGER;
    multipop(R3,R4);

    //Store Bit
    [DISK_STATUS_TABLE + 1] = 1;
    //PageNo
    [DISK_STATUS_TABLE + 2] = PageNo;
    //BlockNo
    [DISK_STATUS_TABLE + 3] = BlockNo;

    store(PageNo,BlockNo);

    [PROCESS_TABLE + ( currentPID* 16) + 4] = WAIT_DISK;

    call SCHEDULER;

	return;
endif;

//DISK LOAD function
if (fnumber == 2)then

    alias pgnumber R3;
    alias blockno R4;

    multipush(R1,R2,R3,R4);
    fnumber = 3;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    //DISK STATUS TABLE
    //Load/Store Bit
    [DISK_STATUS_TABLE + 1] = 0;
    //PageNo
    [DISK_STATUS_TABLE + 2] = pgnumber;
    //BlockNo
    [DISK_STATUS_TABLE + 3] = blockno;

    load(pgnumber,blockno);

    [PROCESS_TABLE + ( currentPID* 16) + 4] = WAIT_DISK;

    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);
	return;
endif;

//Terminal Write Function
if (fnumber == 3) then
	//calling Acquire Terminal
	multipush(R0,R1,R2,R3);
	fnumber = 8;
	//currentPID already contains PID so no need to update
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
	alias word R3;
	print (word);
	multipush(R0,R1,R2,R3,R4);
	fnumber = 9;
	//currentPID already contains PID so no need to update
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4);
	return;
endif;

//Terminal Read
if (fnumber == 4) then
	//calling Acquire Terminal
	multipush(R0,R1,R2,R3);
	fnumber = 8;
	//currentPID already contains PID so no need to update
	
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3);
	read;
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
	multipush(R0,R1,R2,R3);
	call SCHEDULER;
	multipop(R0,R1,R2,R3);
	
	//R3 contains address of the variable as argument
	alias VirAddr R3;
	alias PhyAddr R4;
	//convert logical address to Physical address 
	PhyAddr = ([PTBR + 2 * (VirAddr/ 512)] * 512) + (VirAddr % 512);
	
	//Copy Input buffer from process table to Variable location
	[PhyAddr] = [PROCESS_TABLE + currentPID*16 + 8];
	return;
endif;


return;
	
	
